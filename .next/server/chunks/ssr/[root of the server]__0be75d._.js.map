{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasircioglu/ai-platform/src/app/page.tsx"],"sourcesContent":["import * as React from \"react\";\n\nexport default function Page() {\n    return (\n        <div>\n            <a href=\"/dashboard\">\n                Click to go to dashboard\n            </a>\n        </div>\n    )\n}"],"names":[],"mappings":";;;;;AAEe,SAAS;IACpB,qBACI,6WAAC;kBACG,cAAA,6WAAC;YAAE,MAAK;sBAAa;;;;;;;;;;;AAKjC"}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasircioglu/ai-platform/prisma/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\n// Global nesne için genişletilmiş bir tip tanımı\ninterface CustomGlobal {\n  prisma?: PrismaClient;\n}\n\n// 'global' anahtar sözcüğünü 'CustomGlobal' tipi olarak kullan\ndeclare const global: CustomGlobal;\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n} else {\n  if (!global.prisma) {\n    global.prisma = new PrismaClient();\n  }\n  prisma = global.prisma;\n}\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAUA,IAAI;AAEJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,OAAO,MAAM,EAAE;QAClB,OAAO,MAAM,GAAG,IAAI,6HAAA,CAAA,eAAY;IAClC;IACA,SAAS,OAAO,MAAM;AACxB;uCAEe"}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasircioglu/ai-platform/src/services/email.ts"],"sourcesContent":["import { Resend } from \"resend\";\n\nexport class EmailService {\n  static loadResend = async () => {\n    return new Resend(process.env.RESEND_API_KEY);\n  };\n\n  public static async sendEmail(\n    email: string,\n    subject: string,\n    body: string\n  ): Promise<boolean> {\n    const resend = await EmailService.loadResend();\n\n    try {\n      const { data, error } = await resend.emails.send({\n        from: \"Acme <onboarding@resend.dev>\",\n        to: [email],\n        subject: subject,\n        html: body,\n      });\n\n      if (error) {\n        console.error(error);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM;IACX,OAAO,aAAa;QAClB,OAAO,IAAI,wQAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;IAC9C,EAAE;IAEF,aAAoB,UAClB,KAAa,EACb,OAAe,EACf,IAAY,EACM;QAClB,MAAM,SAAS,MAAM,aAAa,UAAU;QAE5C,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;gBAC/C,MAAM;gBACN,IAAI;oBAAC;iBAAM;gBACX,SAAS;gBACT,MAAM;YACR;YAEA,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC;gBACd,OAAO;YACT;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;YACd,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasircioglu/ai-platform/src/enums.ts"],"sourcesContent":["export enum AUTH_ERRORS {\n  INVALID_CREDENTIALS = \"auth/invalid-credentials\",\n  INTERNAL_SERVER_ERROR = \"auth/internal-server-error\",\n  NOT_IMPLEMENTED = \"auth/not-implemented\",\n  OK = \"auth/ok\",\n}\n\nexport enum SUBSCRIPTION_ERRORS {\n  OK = \"subscription/ok\",\n  NOT_FOUND = \"subscription/not-found\",\n  INTERNAL_SERVER_ERROR = \"subscription/internal-server-error\",\n  NOT_IMPLEMENTED = \"subscription/not-implemented\",\n  INVALID_PARAMS = \"subscription/invalid-params\",\n  INVALID_STATUS = \"subscription/invalid-status\",\n  INVALID_TYPE = \"subscription/invalid-type\",\n  INVALID_FREE_TRIAL = \"subscription/invalid-free-trial\",\n  INVALID_TILL = \"subscription/invalid-till\",\n  INVALID_SYSTEM_METADATA = \"subscription/invalid-system-metadata\",\n  INVALID_CANCEL_REASON = \"subscription/invalid-cancel-reason\",\n  INVALID_USER_ID = \"subscription/invalid-user-id\",\n  INVALID_PAYMENT_ID = \"subscription/invalid-payment-id\",\n  INVALID_PAYMENT_STATUS = \"subscription/invalid-payment-status\",\n  INVALID_PAYMENT_AMOUNT = \"subscription/invalid-payment-amount\",\n  INVALID_PAYMENT_CURRENCY = \"subscription/invalid-payment-currency\",\n  INVALID_PAYMENT_DATE = \"subscription/invalid-payment-date\",\n}\n"],"names":[],"mappings":";;;;AAAO,IAAA,AAAK,qCAAA;;;;;WAAA;;AAOL,IAAA,AAAK,6CAAA;;;;;;;;;;;;;;;;;;WAAA"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasircioglu/ai-platform/src/services/auth.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { JWTPayload, SignJWT, jwtVerify } from \"jose\";\nimport { User } from \"../models/user\";\nimport prisma from \"@prisma\";\nimport bcrypt from \"bcrypt\";\nimport fs from \"fs\";\nimport { EmailService } from \"./email\";\nimport { AUTH_ERRORS } from \"../enums\";\n\nexport class AuthService {\n  private static readEmailTemplate(template: string): string {\n    return fs.readFileSync(\"./email-templates/\" + template + \".html\", \"utf8\");\n  }\n\n  private static replaceEmailTemplateVariables(\n    template: string,\n    key: string,\n    value: string\n  ): string {\n    // example variables = {{name}} or {{ name }}\n    let first = template.replaceAll(\"{{\" + key + \"}}\", value);\n    let second = first.replaceAll(\"{{ \" + key + \" }}\", value);\n\n    return second;\n  }\n\n  public static async signIn(\n    email: string,\n    password: string\n  ): Promise<User | AUTH_ERRORS> {\n    try {\n      const user = await prisma.users.findUnique({\n        where: {\n          email: email,\n        },\n      });\n\n      if (!user) {\n        return AUTH_ERRORS.INVALID_CREDENTIALS;\n      }\n\n      const passHash = await bcrypt.compare(password, user.password);\n\n      if (!passHash) {\n        return AUTH_ERRORS.INVALID_CREDENTIALS;\n      }\n\n      return user as User;\n    } catch (error) {\n      console.error(error);\n      return AUTH_ERRORS.INTERNAL_SERVER_ERROR;\n    }\n  }\n\n  public static async signUp(\n    email: string,\n    password: string\n  ): Promise<User | AUTH_ERRORS> {\n    try {\n      const passHash = await bcrypt.hash(password, 10);\n\n      const user = await prisma.users.create({\n        data: {\n          email: email,\n          password: passHash,\n        },\n      });\n\n      return user as User;\n    } catch (error) {\n      console.error(error);\n      return AUTH_ERRORS.INTERNAL_SERVER_ERROR;\n    }\n  }\n\n  public static async forgotPassword(email: string): Promise<AUTH_ERRORS> {\n    return AUTH_ERRORS.NOT_IMPLEMENTED;\n  }\n\n  public static async checkAuthFromMiddleware(\n    req: NextRequest\n  ): Promise<false | JWTPayload> {\n    const token = req.cookies.get(\"auth-token\")?.value;\n\n    if (!token) {\n      return false;\n    }\n    try {\n      const { payload } = await jwtVerify(\n        token,\n        new TextEncoder().encode(process.env.AUTH_JWT_SECRET)\n      );\n\n      return payload;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  public static async generateToken(\n    payload: JWTPayload,\n    ttl?: number\n  ): Promise<string> {\n    if (!ttl) {\n      ttl = 1000 * 60 * 60 * 24;\n      return await new SignJWT(payload)\n        .setProtectedHeader({\n          alg: \"HS256\",\n          typ: \"JWT\",\n        })\n        .setExpirationTime(new Date(Date.now() + ttl))\n        .sign(new TextEncoder().encode(process.env.AUTH_JWT_SECRET));\n    }\n\n    return await new SignJWT(payload)\n      .setProtectedHeader({\n        alg: \"HS256\",\n        typ: \"JWT\",\n      })\n      .sign(new TextEncoder().encode(process.env.AUTH_JWT_SECRET));\n  }\n\n  public static async sendPasswordResetEmail(\n    email: string\n  ): Promise<AUTH_ERRORS> {\n    const token = await AuthService.generateToken({\n      email: email,\n      rndx: Math.random().toString(36).substring(2, 15),\n    });\n\n    const emailTemplate = AuthService.readEmailTemplate(\"password-reset\");\n    const emailTemplateWithVariables =\n      AuthService.replaceEmailTemplateVariables(\n        emailTemplate,\n        \"link\",\n        process.env.NEXT_PUBLIC_URL + \"/reset-password?token=\" + token\n      );\n\n    const newToken = await prisma.password_resets.create({\n      data: {\n        email: email,\n        token: token,\n        expiresAt: new Date(Date.now() + 1000 * 60 * 10), // 10 min\n      },\n    });\n\n    if (!newToken) {\n      return AUTH_ERRORS.INTERNAL_SERVER_ERROR;\n    }\n\n    const emailSent = await EmailService.sendEmail(\n      email,\n      \"Reset your password\",\n      emailTemplateWithVariables\n    );\n\n    if (!emailSent) {\n      return AUTH_ERRORS.INTERNAL_SERVER_ERROR;\n    }\n\n    return AUTH_ERRORS.OK;\n  }\n\n  public static async verifyPasswordResetToken(\n    newPassword: string,\n    __token: string\n  ): Promise<AUTH_ERRORS> {\n    const token = await prisma.password_resets.findUnique({\n      where: {\n        token: __token,\n      },\n    });\n\n    if (!token) {\n      return AUTH_ERRORS.INVALID_CREDENTIALS;\n    }\n\n    const passHash = await bcrypt.hash(newPassword, 10);\n\n    await prisma.users.update({\n      where: {\n        email: token.email,\n      },\n      data: {\n        password: passHash,\n      },\n    });\n\n    await prisma.password_resets.delete({\n      where: {\n        token: __token,\n      },\n    });\n\n    return AUTH_ERRORS.OK;\n  }\n\n  public static async sendEmailVerificationEmail(\n    email: string\n  ): Promise<AUTH_ERRORS> {\n    // password reset token\n    const token = await AuthService.generateToken({\n      email: email,\n      rndx: Math.random().toString(36).substring(2, 15),\n    });\n\n    const emailTemplate = AuthService.readEmailTemplate(\"email-verify\");\n    const emailTemplateWithVariables =\n      AuthService.replaceEmailTemplateVariables(\n        emailTemplate,\n        \"link\",\n        process.env.NEXT_PUBLIC_URL + \"/verify-email?token=\" + token\n      );\n\n    const newToken = await prisma.email_verifications.create({\n      data: {\n        email: email,\n        token: token,\n        expiresAt: new Date(Date.now() + 1000 * 60 * 10), // 10 min\n      },\n    });\n\n    if (!newToken) {\n      return AUTH_ERRORS.INTERNAL_SERVER_ERROR;\n    }\n\n    const emailSent = await EmailService.sendEmail(\n      email,\n      \"Verify your email\",\n      emailTemplateWithVariables\n    );\n\n    if (!emailSent) {\n      return AUTH_ERRORS.INTERNAL_SERVER_ERROR;\n    }\n\n    return AUTH_ERRORS.OK;\n  }\n\n  public static async verifyEmail(\n    email: string,\n    __token: string\n  ): Promise<AUTH_ERRORS> {\n    const token = await prisma.email_verifications.findUnique({\n      where: {\n        token: __token,\n      },\n    });\n\n    if (!token) {\n      return AUTH_ERRORS.INVALID_CREDENTIALS;\n    }\n\n    const user = await prisma.users.findUnique({\n      where: {\n        email: email,\n      },\n    });\n\n    if (!user) {\n      return AUTH_ERRORS.INVALID_CREDENTIALS;\n    }\n\n    await prisma.users.update({\n      where: {\n        id: user.id,\n      },\n      data: {\n        emailVerifiedAt: new Date(Date.now()),\n      },\n    });\n\n    await prisma.email_verifications.deleteMany({\n      where: {\n        email: email,\n        token: __token,\n      },\n    });\n\n    return AUTH_ERRORS.OK;\n  }\n}\n"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;AANA;AAAA;;;;;;;AAQO,MAAM;IACX,OAAe,kBAAkB,QAAgB,EAAU;QACzD,OAAO,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,uBAAuB,WAAW,SAAS;IACpE;IAEA,OAAe,8BACb,QAAgB,EAChB,GAAW,EACX,KAAa,EACL;QACR,6CAA6C;QAC7C,IAAI,QAAQ,SAAS,UAAU,CAAC,OAAO,MAAM,MAAM;QACnD,IAAI,SAAS,MAAM,UAAU,CAAC,QAAQ,MAAM,OAAO;QAEnD,OAAO;IACT;IAEA,aAAoB,OAClB,KAAa,EACb,QAAgB,EACa;QAC7B,IAAI;YACF,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;gBACzC,OAAO;oBACL,OAAO;gBACT;YACF;YAEA,IAAI,CAAC,MAAM;gBACT,OAAO,4GAAA,CAAA,cAAW,CAAC,mBAAmB;YACxC;YAEA,MAAM,WAAW,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;YAE7D,IAAI,CAAC,UAAU;gBACb,OAAO,4GAAA,CAAA,cAAW,CAAC,mBAAmB;YACxC;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;YACd,OAAO,4GAAA,CAAA,cAAW,CAAC,qBAAqB;QAC1C;IACF;IAEA,aAAoB,OAClB,KAAa,EACb,QAAgB,EACa;QAC7B,IAAI;YACF,MAAM,WAAW,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;YAE7C,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC;gBACrC,MAAM;oBACJ,OAAO;oBACP,UAAU;gBACZ;YACF;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;YACd,OAAO,4GAAA,CAAA,cAAW,CAAC,qBAAqB;QAC1C;IACF;IAEA,aAAoB,eAAe,KAAa,EAAwB;QACtE,OAAO,4GAAA,CAAA,cAAW,CAAC,eAAe;IACpC;IAEA,aAAoB,wBAClB,GAAgB,EACa;QAC7B,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe;QAE7C,IAAI,CAAC,OAAO;YACV,OAAO;QACT;QACA,IAAI;YACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,6MAAA,CAAA,YAAS,AAAD,EAChC,OACA,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,eAAe;YAGtD,OAAO;QACT,EAAE,OAAO,OAAO;YACd,OAAO;QACT;IACF;IAEA,aAAoB,cAClB,OAAmB,EACnB,GAAY,EACK;QACjB,IAAI,CAAC,KAAK;YACR,MAAM,OAAO,KAAK,KAAK;YACvB,OAAO,MAAM,IAAI,2MAAA,CAAA,UAAO,CAAC,SACtB,kBAAkB,CAAC;gBAClB,KAAK;gBACL,KAAK;YACP,GACC,iBAAiB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,MACxC,IAAI,CAAC,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,eAAe;QAC9D;QAEA,OAAO,MAAM,IAAI,2MAAA,CAAA,UAAO,CAAC,SACtB,kBAAkB,CAAC;YAClB,KAAK;YACL,KAAK;QACP,GACC,IAAI,CAAC,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,eAAe;IAC9D;IAEA,aAAoB,uBAClB,KAAa,EACS;QACtB,MAAM,QAAQ,MAAM,YAAY,aAAa,CAAC;YAC5C,OAAO;YACP,MAAM,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;QAChD;QAEA,MAAM,gBAAgB,YAAY,iBAAiB,CAAC;QACpD,MAAM,6BACJ,YAAY,6BAA6B,CACvC,eACA,QACA,4DAA8B,2BAA2B;QAG7D,MAAM,WAAW,MAAM,gHAAA,CAAA,UAAM,CAAC,eAAe,CAAC,MAAM,CAAC;YACnD,MAAM;gBACJ,OAAO;gBACP,OAAO;gBACP,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK;YAC/C;QACF;QAEA,IAAI,CAAC,UAAU;YACb,OAAO,4GAAA,CAAA,cAAW,CAAC,qBAAqB;QAC1C;QAEA,MAAM,YAAY,MAAM,wHAAA,CAAA,eAAY,CAAC,SAAS,CAC5C,OACA,uBACA;QAGF,IAAI,CAAC,WAAW;YACd,OAAO,4GAAA,CAAA,cAAW,CAAC,qBAAqB;QAC1C;QAEA,OAAO,4GAAA,CAAA,cAAW,CAAC,EAAE;IACvB;IAEA,aAAoB,yBAClB,WAAmB,EACnB,OAAe,EACO;QACtB,MAAM,QAAQ,MAAM,gHAAA,CAAA,UAAM,CAAC,eAAe,CAAC,UAAU,CAAC;YACpD,OAAO;gBACL,OAAO;YACT;QACF;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,4GAAA,CAAA,cAAW,CAAC,mBAAmB;QACxC;QAEA,MAAM,WAAW,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,aAAa;QAEhD,MAAM,gHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACxB,OAAO;gBACL,OAAO,MAAM,KAAK;YACpB;YACA,MAAM;gBACJ,UAAU;YACZ;QACF;QAEA,MAAM,gHAAA,CAAA,UAAM,CAAC,eAAe,CAAC,MAAM,CAAC;YAClC,OAAO;gBACL,OAAO;YACT;QACF;QAEA,OAAO,4GAAA,CAAA,cAAW,CAAC,EAAE;IACvB;IAEA,aAAoB,2BAClB,KAAa,EACS;QACtB,uBAAuB;QACvB,MAAM,QAAQ,MAAM,YAAY,aAAa,CAAC;YAC5C,OAAO;YACP,MAAM,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;QAChD;QAEA,MAAM,gBAAgB,YAAY,iBAAiB,CAAC;QACpD,MAAM,6BACJ,YAAY,6BAA6B,CACvC,eACA,QACA,4DAA8B,yBAAyB;QAG3D,MAAM,WAAW,MAAM,gHAAA,CAAA,UAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC;YACvD,MAAM;gBACJ,OAAO;gBACP,OAAO;gBACP,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK;YAC/C;QACF;QAEA,IAAI,CAAC,UAAU;YACb,OAAO,4GAAA,CAAA,cAAW,CAAC,qBAAqB;QAC1C;QAEA,MAAM,YAAY,MAAM,wHAAA,CAAA,eAAY,CAAC,SAAS,CAC5C,OACA,qBACA;QAGF,IAAI,CAAC,WAAW;YACd,OAAO,4GAAA,CAAA,cAAW,CAAC,qBAAqB;QAC1C;QAEA,OAAO,4GAAA,CAAA,cAAW,CAAC,EAAE;IACvB;IAEA,aAAoB,YAClB,KAAa,EACb,OAAe,EACO;QACtB,MAAM,QAAQ,MAAM,gHAAA,CAAA,UAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC;YACxD,OAAO;gBACL,OAAO;YACT;QACF;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,4GAAA,CAAA,cAAW,CAAC,mBAAmB;QACxC;QAEA,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;YACzC,OAAO;gBACL,OAAO;YACT;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,4GAAA,CAAA,cAAW,CAAC,mBAAmB;QACxC;QAEA,MAAM,gHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACxB,OAAO;gBACL,IAAI,KAAK,EAAE;YACb;YACA,MAAM;gBACJ,iBAAiB,IAAI,KAAK,KAAK,GAAG;YACpC;QACF;QAEA,MAAM,gHAAA,CAAA,UAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC;YAC1C,OAAO;gBACL,OAAO;gBACP,OAAO;YACT;QACF;QAEA,OAAO,4GAAA,CAAA,cAAW,CAAC,EAAE;IACvB;AACF"}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///Users/hasircioglu/ai-platform/src/context/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { AuthService } from \"../services/auth\";\n\nexport const signInAction = async (email: string, password: string) => {\n  const user = await AuthService.signIn(email, password);\n  return user;\n};\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,MAAM,uCAAU,GAAV,eAAe,OAAO,OAAe;IAChD,MAAM,OAAO,MAAM,uHAAA,CAAA,cAAW,CAAC,MAAM,CAAC,OAAO;IAC7C,OAAO;AACT;;;IAHa;;AAAA,8WAAA"}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}