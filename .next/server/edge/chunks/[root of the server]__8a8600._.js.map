{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/prisma/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\n// Global nesne için genişletilmiş bir tip tanımı\ninterface CustomGlobal {\n  prisma?: PrismaClient;\n}\n\n// 'global' anahtar sözcüğünü 'CustomGlobal' tipi olarak kullan\ndeclare const global: CustomGlobal;\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n} else {\n  if (!global.prisma) {\n    global.prisma = new PrismaClient();\n  }\n  prisma = global.prisma;\n}\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAUA,IAAI;AAEJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,OAAO,MAAM,EAAE;QAClB,OAAO,MAAM,GAAG,IAAI,0RAAA,CAAA,eAAY;IAClC;IACA,SAAS,OAAO,MAAM;AACxB;uCAEe"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/enums.ts"],"sourcesContent":["export enum AUTH_ERRORS {\n  INVALID_CREDENTIALS = \"auth/invalid-credentials\",\n  INTERNAL_SERVER_ERROR = \"auth/internal-server-error\",\n  NOT_IMPLEMENTED = \"auth/not-implemented\",\n}\n\n"],"names":[],"mappings":";;;AAAO,IAAA,AAAK,qCAAA;;;;WAAA"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/services"],"sourcesContent":["__turbopack_export_namespace__(__import_unsupported(`fs`));\n"],"names":[],"mappings":"AAAA,+BAA+B,qBAAqB,CAAC,EAAE,CAAC"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/services/auth-service.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { JWTPayload, SignJWT, jwtVerify } from \"jose\";\nimport { User } from \"../models/user\";\nimport prisma from \"@prisma\";\nimport { AUTH_ERRORS } from \"@/enums\";\nimport bcrypt from \"bcrypt\";\nimport fs from \"fs\";\n\nexport class AuthService {\n  private static readEmailTemplate(template: string): string {\n    return fs.readFileSync(\"./email-templates/\" + template + \".html\", \"utf8\");\n  }\n\n  private static replaceEmailTemplateVariables(\n    template: string,\n    key: string,\n    value: string\n  ): string {\n    // example variables = {{name}} or {{ name }}\n    let first = template.replaceAll(\"{{\" + key + \"}}\", value);\n    let second = first.replaceAll(\"{{ \" + key + \" }}\", value);\n\n    return second;\n  }\n\n  public static async signIn(\n    email: string,\n    password: string\n  ): Promise<User | AUTH_ERRORS> {\n    try {\n      const user = await prisma.users.findUnique({\n        where: {\n          email: email,\n        },\n      });\n\n      if (!user) {\n        return AUTH_ERRORS.INVALID_CREDENTIALS;\n      }\n\n      const passHash = await bcrypt.compare(password, user.password);\n\n      if (!passHash) {\n        return AUTH_ERRORS.INVALID_CREDENTIALS;\n      }\n\n      return user as User;\n    } catch (error) {\n      console.error(error);\n      return AUTH_ERRORS.INTERNAL_SERVER_ERROR;\n    }\n  }\n\n  public static async signUp(\n    email: string,\n    password: string\n  ): Promise<User | AUTH_ERRORS> {\n    try {\n      const passHash = await bcrypt.hash(password, 10);\n\n      const user = await prisma.users.create({\n        data: {\n          email: email,\n          password: passHash,\n        },\n      });\n\n      return user as User;\n    } catch (error) {\n      console.error(error);\n      return AUTH_ERRORS.INTERNAL_SERVER_ERROR;\n    }\n  }\n\n  public static async forgotPassword(email: string): Promise<AUTH_ERRORS> {\n    return AUTH_ERRORS.NOT_IMPLEMENTED;\n  }\n\n  public static async checkAuthFromMiddleware(\n    req: NextRequest\n  ): Promise<false | JWTPayload> {\n    const token = req.cookies.get(\"auth-token\")?.value;\n\n    if (!token) {\n      return false;\n    }\n    try {\n      const { payload } = await jwtVerify(\n        token,\n        new TextEncoder().encode(process.env.AUTH_JWT_SECRET)\n      );\n\n      return payload;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  public static async generateToken(payload: JWTPayload): Promise<string> {\n    return await new SignJWT(payload).sign(\n      new TextEncoder().encode(process.env.AUTH_JWT_SECRET)\n    );\n  }\n\n  public static async sendPasswordResetEmail(\n    email: string\n  ): Promise<AUTH_ERRORS> {\n    return AUTH_ERRORS.NOT_IMPLEMENTED;\n  }\n\n  public static async verifyPasswordResetToken(\n    email: string,\n    newPassword: string,\n    token: string\n  ): Promise<AUTH_ERRORS> {\n    return AUTH_ERRORS.NOT_IMPLEMENTED;\n  }\n\n  public static async sendEmailVerificationEmail(\n    email: string\n  ): Promise<AUTH_ERRORS> {\n    // password reset token\n    const token = await AuthService.generateToken({\n      email: email,\n      rndx: Math.random().toString(36).substring(2, 15),\n    });\n\n    const emailTemplate = AuthService.readEmailTemplate(\"email-verify\");\n    const emailTemplateWithVariables = AuthService.replaceEmailTemplateVariables(\n      emailTemplate,\n      \"link\",\n      process.env.NEXT_PUBLIC_URL + \"/verify-email?token=\" + token\n    );\n\n    const newToken = await prisma.password_resets.create({\n      data: {\n        email: email,\n        token: token,\n        expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24),\n      },\n    });\n  }\n\n  public static async verifyEmail(email: string): Promise<AUTH_ERRORS> {\n    return AUTH_ERRORS.NOT_IMPLEMENTED;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { AuthService } from \"./services/auth-service\";\n\nexport default async function middleware(req: NextRequest) {\n  const payload = await AuthService.checkAuthFromMiddleware(req);\n  if (payload) {\n    return NextResponse.next();\n  }\n\n  return NextResponse.redirect(new URL(\"/login\", req.url));\n}\n\nexport const config = {\n  matcher: [\"/dashboard/:path*\"],\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;AAGe,eAAe,WAAW,GAAgB;IACvD,MAAM,UAAU,MAAM,kIAAA,CAAA,cAAW,CAAC,uBAAuB,CAAC;IAC1D,IAAI,SAAS;QACX,OAAO,oTAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,OAAO,oTAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;AACxD;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoB;AAChC"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}