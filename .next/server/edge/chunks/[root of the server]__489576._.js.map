{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/prisma/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\n// Global nesne için genişletilmiş bir tip tanımı\ninterface CustomGlobal {\n  prisma?: PrismaClient;\n}\n\n// 'global' anahtar sözcüğünü 'CustomGlobal' tipi olarak kullan\ndeclare const global: CustomGlobal;\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n} else {\n  if (!global.prisma) {\n    global.prisma = new PrismaClient();\n  }\n  prisma = global.prisma;\n}\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAUA,IAAI;AAEJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,OAAO,MAAM,EAAE;QAClB,OAAO,MAAM,GAAG,IAAI,0RAAA,CAAA,eAAY;IAClC;IACA,SAAS,OAAO,MAAM;AACxB;uCAEe"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/services/auth-service.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { JWTPayload, SignJWT, jwtVerify } from \"jose\";\nimport { User } from \"../models/user\";\nimport prisma from \"@prisma\";\n\nexport class AuthService {\n  public static async signIn(\n    email: string,\n    password: string\n  ): Promise<User | null> {\n    const user = await prisma.users.findUnique({\n      where: {\n        email: email,\n        password: password,\n      },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return user as User;\n  }\n  public static async checkAuth(req: NextRequest): Promise<false | JWTPayload> {\n    const token = req.cookies.get(\"auth-token\")?.value;\n    if (!token) {\n      return false;\n    }\n    try {\n      const { payload } = await jwtVerify(\n        token,\n        new TextEncoder().encode(process.env.AUTH_JWT_SECRET)\n      );\n\n      return payload;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  public static async generateToken(payload: JWTPayload): Promise<string> {\n    return await new SignJWT(payload).sign(\n      new TextEncoder().encode(process.env.AUTH_JWT_SECRET)\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAGA;AAFA;AAAA;;;AAIO,MAAM;IACX,aAAoB,OAClB,KAAa,EACb,QAAgB,EACM;QACtB,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;YACzC,OAAO;gBACL,OAAO;gBACP,UAAU;YACZ;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO;QACT;QAEA,OAAO;IACT;IACA,aAAoB,UAAU,GAAgB,EAA+B;QAC3E,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe;QAC7C,IAAI,CAAC,OAAO;YACV,OAAO;QACT;QACA,IAAI;YACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yMAAA,CAAA,YAAS,AAAD,EAChC,OACA,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,eAAe;YAGtD,OAAO;QACT,EAAE,OAAO,OAAO;YACd,OAAO;QACT;IACF;IAEA,aAAoB,cAAc,OAAmB,EAAmB;QACtE,OAAO,MAAM,IAAI,uMAAA,CAAA,UAAO,CAAC,SAAS,IAAI,CACpC,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,eAAe;IAExD;AACF"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { AuthService } from \"./services/auth-service\";\n\nexport default async function middleware(req: NextRequest) {\n  const payload = await AuthService.checkAuth(req);\n  if (payload) {\n    return NextResponse.next();\n  }\n\n  return NextResponse.redirect(new URL(\"/login\", req.url));\n}\n\nexport const config = {\n  matcher: [\"/dashboard/:path*\"],\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;AAGe,eAAe,WAAW,GAAgB;IACvD,MAAM,UAAU,MAAM,kIAAA,CAAA,cAAW,CAAC,SAAS,CAAC;IAC5C,IAAI,SAAS;QACX,OAAO,oTAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,OAAO,oTAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;AACxD;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoB;AAChC"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}